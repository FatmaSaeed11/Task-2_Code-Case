# -*- coding: utf-8 -*-
"""Task2_Code Case.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y5dprzUgGfj_4SwckH8nUQ2vxVOdliGY

**House Price Prediction using ML**

import libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
import sklearn
from sklearn.model_selection import train_test_split

"""load dataset"""

house_data=pd.read_csv('/content/houses.csv')

print(house_data)

house_data.info()

house_data.dropna(inplace=True)

house_data.info()

X=house_data.drop(['median_house_value'], axis=1)
y=house_data['median_house_value']

print(X)

print(y)

"""train test split"""

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2)

data_train=X_train.join(y_train)
print(data_train)

"""visualize our data

"""

data_train.hist(figsize=(20,9))

data_train.corr()

plt.figure(figsize=(10,10))
sns.heatmap(data_train.corr(),cbar=True,square=True,fmt='01f',annot_kws={'size':8},cmap="RdPu")

"""data preprocessing"""

data_train['total_rooms']=np.log(data_train['total_rooms']+1)
data_train['total_bedrooms']=np.log(data_train['total_bedrooms']+1)
data_train['population']=np.log(data_train['population']+1)
data_train['households']=np.log(data_train['households']+1)

data_train.hist(figsize=(20,9))

"""one hot encoding

"""

data_train.ocean_proximity.value_counts()

data_train=data_train.join(pd.get_dummies(data_train.ocean_proximity)).drop(['ocean_proximity'],axis=1)

print(data_train)

plt.figure(figsize=(10,10))
sns.heatmap(data_train.corr(),cbar=True,square=True,fmt='01f',annot_kws={'size':8},cmap="RdPu")

"""Linear Regression Model"""

# train model
from sklearn.linear_model import LinearRegression

X_train,y_train= data_train.drop(['median_house_value'],axis=1),data_train['median_house_value']

reg=LinearRegression()
reg.fit(X_train,y_train)

#test model
data_test=X_test.join(y_test)
data_test['total_rooms']=np.log(data_test['total_rooms']+1)
data_test['total_bedrooms']=np.log(data_test['total_bedrooms']+1)
data_test['population']=np.log(data_test['population']+1)
data_test['households']=np.log(data_test['households']+1)

data_test=data_test.join(pd.get_dummies(data_test.ocean_proximity)).drop(['ocean_proximity'],axis=1)

data_test['bedroom_ratio']=data_test['total_bedrooms']/data_test['total_rooms']
data_test['household_rooms']=data_test['total_rooms']/data_test['households']

print(data_test)

X_test,y_test= data_test.drop(['median_house_value'],axis=1),data_test['median_house_value']

reg.score(X_train,y_train)

#plot and find MSE and RMSE
linear_model = LinearRegression().fit(total_bedrooms_np.reshape((-1, 1)),
                                      total_rooms_np)

dummy_inputs = np.linspace(0, 7000, num=2000)
dummy_predictions = linear_model.predict(dummy_inputs.reshape((-1, 1)))

plt.scatter(total_bedrooms_np, total_rooms_np, label='room',color='green')
plt.plot(dummy_inputs, dummy_predictions, label='Linear Model', color='red')
plt.xlabel(' Bedrooms')
plt.ylabel(' Rooms')
plt.title(' Rooms in California')
plt.legend()
plt.show()

# root mean squared error
mse(linear_model.predict(total_bedrooms_np.reshape((-1, 1))),
    total_rooms_np,
    squared=False)

# mean squared error MSE
from sklearn.metrics import mean_squared_error as mse

mse(linear_model.predict(total_bedrooms_np.reshape((-1, 1))), total_rooms_np)